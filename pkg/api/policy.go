package api

import (
	autoscaling "k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ActionSpec is to define the action of the policy
type ActionSpec string

const (
	// ScaleUp action
	ScaleUp ActionSpec = "scaleUp"
	// ScaleDown action
	ScaleDown ActionSpec = "scaleDown"
	// APIGroup is the group for api
	APIGroup = "icp.ibm.com"
	// APIVersion is the version for api
	APIVersion = "v1"
)

// Status show the current status of policy
type Status struct {
	CreationTimestamp *metav1.Time
	LastScheduleTime  *metav1.Time
}

// PolicySpec define the spec of the policy
type PolicySpec struct {
	Action         ActionSpec                              `json:"action"`
	Schedule       string                                  `json:"schedule"`
	ScaleTargetRef autoscaling.CrossVersionObjectReference `json:"scaleTargetRef"`
	TargetReplicas int32                                   `json:"replicas,omitempty"`
	Status         Status                                  `json:"status"`
}

// PolicyTab represents a JSON object for the CronTab custom resource that we register in the Kubernetes API.
type PolicyTab struct {
	// The following fields mirror the fields in the third party resource.
	metav1.TypeMeta `json:",inline"`
	ObjectMeta      metav1.ObjectMeta `json:"metadata"`
	Spec            PolicySpec        `json:"spec"`
}

// PolicyList is a list of Pods.
type PolicyList struct {
	metav1.TypeMeta
	// +optional
	metav1.ListMeta

	Items []PolicyTab
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyList.
func (in *PolicyList) DeepCopy() *PolicyList {
	if in == nil {
		return nil
	}
	out := new(PolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyList) DeepCopyInto(out *PolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PolicyTab, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopyInto is a deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyTab) DeepCopyInto(out *PolicyTab) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *PolicyTab) DeepCopy() *PolicyTab {
	if in == nil {
		return nil
	}
	out := new(PolicyTab)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PolicyTab) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is a deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicySpec) DeepCopyInto(out *PolicySpec) {
	*out = *in
	return
}

// DeepCopy is a deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *PolicySpec) DeepCopy() *PolicySpec {
	if in == nil {
		return nil
	}
	out := new(PolicySpec)
	in.DeepCopyInto(out)
	return out
}

// AddKnownTypes add schme to the client
func AddKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(
		schema.GroupVersion{Group: APIGroup, Version: APIVersion},
		&PolicyTab{},
		&PolicyList{},
		&metav1.ListOptions{},
		&metav1.DeleteOptions{},
	)

	return nil
}
